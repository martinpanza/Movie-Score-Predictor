install.packages("rmarkdown")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
summary(movie_metadata)
movies <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/movies.csv")
View(movies)
links <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/links.csv")
View(links)
View(movies)
summary(movies)
View(links)
summary(links)
clean <- movie_metadata[ unique(movie_metadata$movie_imdb_link),]
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
library(stringr)
library(ggplot2)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
movie_metadata <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
View(movies)
View(movies)
View(links)
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
movie_metadata <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
#Filtrar movies
movies <- merge(movies,movie_metadata[,c(5,11,13,23,26,29)],by.x = "movieId",by.y = "movieId")
movies <- movies[,1:3]
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
View(join)
View(movie_metadata)
View(movie_metadata)
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
View(movie_metadata)
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
clean <- movie_metadata[ unique(join$movie_imdb_link),]
clean <- movie_metadata[ unique(join$movie_imdb_link),]
clean <- join[ unique(join$movie_imdb_link),]
View(movies)
year <- str_extract(movies$title,"[([:digit:])]")
year <- str_extract(movies$title,"[[(][:digit:][)]]")
year <- str_extract(movies$title,"[[:digit:]]+")
links$tmdbId <- str_extract(movies$title,"[[:digit:]]+")
#Obtener año de Movies
links$tmdbId <- str_extract(movies$title,"([[:digit:]]+)")
View(links)
View(movies)
links$tmdbId <- str_extract(movies$title,"[(]+[[:digit:]]+[)]+")
View(links)
year <- str_extract(movies$title,"[(]+[[:digit:]]+[)]+")
year <- str_extract(movies$title,"[[:digit:]]+")
year <- as.numeric(year)
summary(year)
movies <- cbind(movies,year)
View(movies)
qqnorm(clean$imdb_score)
qqnorm(clean)
qqnorm(clean, y = clean$imdb_score)
help(qqnorm)
qqnorm(movie_metadata$imdb_score)
qline(movie_metadata$imdb_score)
qqline(movie_metadata$imdb_score)
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
movies <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/movies.csv")
View(movies)
View(movies)
View(movies)
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
movies <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/movies.csv")
View(movies)
install.packages('seriation')
library(seriation)
GenerateCubiclePoints <- function(nrPoints, nrDim, center=rep(0,nrDim), l=1){
x <-  matrix(runif(nrPoints*nrDim,-1,1),ncol=nrDim)
x <-  as.data.frame(
t(apply(x*(l/2),1,'+',center))
)
names(x) <- make.names(seq_len(nrDim))
x
}
set.seed(50551178)
rsamp <- GenerateCubiclePoints(300,2,c(2,2),l=4)
str(rsamp)
summary(rsamp)
plot(rsamp$X1,rsamp$X2)
data('iris')
str(iris)
iris.scaled <- scale(iris[, -5])
summary(iris.scaled)
pairs(~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, data=iris.scaled, col=iris$Species)
wss <- (nrow(iris.scaled)-1) * sum(apply(iris.scaled, 2, var))  # para "1 cluster" usaremos la varianza como medida de error
set.seed(50551178)
wss <- (nrow(iris.scaled)-1) * sum(apply(iris.scaled, 2, var))  # para "1 cluster" usaremos la varianza como medida de error
for (i in 2:15) wss[i] <- sum(kmeans(iris.scaled,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Número de clusters",
ylab="Error total")
install.packages(igraph)
install.packages("igraph")
movies <- read.csv("~/Proyecto Mineria de Datos/Filtro Pablo/movies.csv", header=FALSE)
View(movies)
summary(movies)
View(movies)
Movies <- read.csv("~/Movies.csv")
View(Movies)
summary(movies)
movies <- read.csv("~/Proyecto Mineria de Datos/Filtro Pablo/movies.csv")
View(movies)
summary(movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
# Importar
movies <- read.csv("~/Escritorio/Mineria/Proyecto/Datasets/movies.csv")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
links <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/links.csv")
View(links)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
movie_metadata <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
View(movie_metadata)
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
library(stringr)
library(ggplot2)
links <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/links.csv")
View(links)
movies <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/movies.csv")
View(movies)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
View(join)
library(stringr)
library(ggplot2)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
View(movie_metadata)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
# Eliminar duplicados
clean <- join[!duplicated(join[,1]),]
View(clean)
View(clean)
View(clean)
movies <- read.csv("~/Movie Score Predictor/Datasets/movies.csv")
View(movies)
actors <- aggregate(movies, by=list(movies$director_name), FUN=lenght)
actors <- aggregate(movies, by=list(movies$director_name), FUN=length)
View(actors)
director_filter <- aggregate(movies, by=list(movies$director_name), FUN=lenght)
director_fitter <- director_filter[, c(1,2)]
colnames(director_filter) = c("director_name","movies_quantity")
director_filter <- aggregate(movies, by=list(movies$director_name), FUN=lenght)
director_filter <- aggregate(movies, by=list(movies$director_name), FUN=length)
director_fitter <- director_filter[, c(1,2)]
colnames(director_filter) = c("director_name","movies_quantity")
director_filter <- aggregate(movies, by=list(movies$director_name), FUN=length)
director_filter <- director_filter[, c(1,2)]
colnames(director_filter) = c("director_name","movies_quantity")
director_filter <- director_filter[director_filter$movies_quantity>1,]
director_filter <- director_filter[director_filter$movies_quantity>2,]
director_filter <- director_filter[director_filter$movies_quantity>1,]
director_filter <- aggregate(movies, by=list(movies$director_name), FUN=length)
director_filter <- director_filter[, c(1,2)]
colnames(director_filter) = c("director_name","movies_quantity")
director_filter <- director_filter[director_filter$movies_quantity>1,]
movies2 <- merge(movies, director_filter, by.x = "director_name",by.y = "director_name")
movies2 <- merge(movies, director_filter, by.x = "director_name",by.y = "director_name", all.x=TRUE)
View(movies2)
View(movies)
View(movies2)
movies2 <- movies2[, c(2:5,1,6:10)]
movies2 <- merge(movies, director_filter, by.x = "director_name",by.y = "director_name", all.x=TRUE)
movies2 <- movies2[, c(2:5,1,6:21)]
View(movies2)
movies2 <- merge(movies, director_filter, by.x = "director_name",by.y = "director_name", all.x=TRUE)
movies2 <- movies2[, c(2:6,1,7:20)]
View(movies2)
movies2 <- merge(movies, director_filter, by.x = "director_name",by.y = "director_name", all.x=TRUE, all.y=TRUE)
movies2 <- merge(movies, director_filter, by.x = "director_name",by.y = "director_name", all.y=TRUE)
movies2 <- movies
movies2 <- movies[if (!movies$director_name %in% director_filter$director_name){
movies$director_name=""
},]
movies2 <- movies
movies2[(!movies$director_name %in% director_filter$director_name), ] <- ""
View(movies2)
View(movies2)
movies2 <- movies
movies2[(!movies$director_name %in% director_filter$director_name), 6] <- ""
View(movies2)
director_filter <- aggregate(movies, by=list(movies$director_name), FUN=length)
director_filter <- director_filter[, c(1,2)]
colnames(director_filter) = c("director_name","movies_quantity")
director_filter <- director_filter[director_filter$movies_quantity > 1,]
movies[(!movies$director_name %in% director_filter$director_name), 6] <- ""
View(movies)
setwd("~/Movie Score Predictor/Datasets")
write.csv(movies, file = "movies.csv", row.names = FALSE)
