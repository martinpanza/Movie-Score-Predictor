View(movies)
summary(movies)
View(movies)
Movies <- read.csv("~/Movies.csv")
View(Movies)
summary(movies)
movies <- read.csv("~/Proyecto Mineria de Datos/Filtro Pablo/movies.csv")
View(movies)
summary(movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
View(movies)
View(Movies)
# Importar
movies <- read.csv("~/Escritorio/Mineria/Proyecto/Datasets/movies.csv")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
links <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/links.csv")
View(links)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
movie_metadata <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
View(movie_metadata)
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
library(stringr)
library(ggplot2)
links <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/links.csv")
View(links)
movies <- read.csv("~/Proyecto Mineria de Datos/Datasets/ml-latest/movies.csv")
View(movies)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
View(join)
library(stringr)
library(ggplot2)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
movie_metadata <- read.csv("~/Proyecto Mineria de Datos/Datasets/movie_metadata.csv")
View(movie_metadata)
#Regex - Extraer los links
movie_metadata$movie_imdb_link <- str_extract(movie_metadata$movie_imdb_link,"[[:digit:]]+")
# As Numeric
View(movie_metadata)
# Join
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
movie_metadata$movie_imdb_link <- as.numeric(movie_metadata$movie_imdb_link)
join <- merge(movie_metadata,links,by.x = "movie_imdb_link",by.y = "imdbId")
# Eliminar duplicados
clean <- join[!duplicated(join[,1]),]
View(clean)
View(clean)
View(clean)
movies <- read.csv("~/Movie Score Predictor/Datasets/movies.csv")
View(movies)
actors1 <- movies$actor_1_name
actors1 <- as.character(actors1)
actors2 <- movies$actor_2_name
actors2 <- as.character(actors2)
actors3 <- movies$actor_3_name
actors3 <- as.character(actors3)
actors <- as.vector(rbind(actors1,
actors2,
actors3))
actors <- unique(actors)
#actors <- actors[actors!=""]
relations <- data.frame(from=as.vector(rbind(actors1, actors2)),
to=as.vector(rbind(actors2, actors3)))
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
library("igraph")
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actor3)),
to=as.vector(rbind(actors2, actors3, actors1)))
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
)
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3),
to=as.vector(rbind(actors2, actors3, actors1)))
)
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),to=as.vector(rbind(actors2, actors3, actors1)))
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
eigen <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
print(eigen)
head(eigen)
summary(eigen)
head(eigen$vector)
head(eigen$vector,50)
head(eigen$value)
head(eigen$options)
ec <- eigen$vector
head(ec)
ec <- data.frame(eigen$vector)
View(ec)
View(movies)
actors1 <- movies$actor_1_name
actors1 <- as.character(actors1)
actors2 <- movies$actor_2_name
actors2 <- as.character(actors2)
actors3 <- movies$actor_3_name
actors3 <- as.character(actors3)
actors <- as.vector(rbind(actors1,
actors2,
actors3))
actors <- unique(actors)
#actors <- actors[actors!=""]
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)))
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
eigen <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec <- data.frame(eigen$vector)
View(ec)
actors1 <- movies$actor_1_name
actors1 <- as.character(actors1)
actors2 <- movies$actor_2_name
actors2 <- as.character(actors2)
actors3 <- movies$actor_3_name
actors3 <- as.character(actors3)
actors <- as.vector(rbind(actors1,
actors2,
actors3))
actors <- unique(actors)
#actors <- actors[actors!=""]
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)))
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
eigen <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec <- data.frame(eigen$vector)
actors1 <- c(as.character(movies$actor_1_name), movies$imdb_score)
actors2 <- c(as.character(movies$actor_2_name), movies$imdb_score)
actors3 <- c(as.character(movies$actor_3_name), movies$imdb_score)
head(actors1)
actors1 <- data.frame(c(as.character(movies$actor_1_name), movies$imdb_score))
View(actors1)
actors1 <- data.frame(actor=(as.character(movies$actor_1_name)), score=(movies$imdb_score)))
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score)))
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
View(actors1)
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
View(actors)
View(relations)
aggdata <-aggregate(actors, by=list(actors$actor),
FUN=mean, na.rm=TRUE)
View(aggdata)
warnings()
aggdata <-aggregate(actors, by=list(actors$actor),
FUN=mean)
View(aggdata)
View(movies)
colnames(actors) = c(Actor, fake, Score)
colnames(actors) = c("Actor", "fake", "Score")
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor),
FUN=mean)
colnames(actors) = c("Actor", "fake", "Score")
View(actors)
colnames(actors) = c("Actor", "fake", "Mean score")
View(actors)
View(actors)
View(actors)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
colnames(actors) = c("Actor", "Mean score")
View(actors)
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
print(g, e=TRUE)
print(g, v=TRUE)
print(g, e=TRUE, v=TRUE)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec2 <- data.frame(eigen$vector)
View(ec)
View(ec2)
View(ec)
View(ec2)
View(ec)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = score,
options = arpack_defaults)
colnames(actors) = c("Actor", "weight")
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec2 <- data.frame(eigen$vector)
View(ec2)
colnames(actors) = c("Actor", "weights")
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
print(g, e=TRUE, v=TRUE)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec2 <- data.frame(eigen$vector)
View(ec2)
ec2 <- data.frame(eigen2$vector)
View(ec2)
View(ec)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE,
options = arpack_defaults)
ec2 <- data.frame(eigen2$vector)
View(ec2)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = "weights",
options = arpack_defaults)
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
colnames(actors) = c("Actor", "weights")
View(actors)
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = "weights",
options = arpack_defaults)
actors <- as.vector(rbind(actors1,
)
)
)
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
colnames(actors) = c("Actor", "weights")
View(ec2)
View(actors)
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)),
weights=rbind(10 - movies$imdb_score, 10 - movies$imdb_score, 10 - movies$imdb_score))
View(relations)
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)),
weights=as.vector(rbind(10 - movies$imdb_score, 10 - movies$imdb_score, 10 - movies$imdb_score)))
View(relations)
View(relations)
relaions <- relations[, c(1,3,5)]
relations <- relations[, c(1,3,5)]
View(relations)
colnames(relations) = c("from","to","weights")
View(relations)
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
print(g, e=TRUE, v=TRUE)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = "weights",
options = arpack_defaults)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec2 <- data.frame(eigen2$vector)
View(ec2)
View(ec2)
actors <- actors[! actors$Actor==" ",]
actors <- actors[! actors$Actor=="",]
relations <- relations[!relations$from == "" | !relations$to == ""]
colnames(relations) = c("from","to","weights")
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)),
weights=as.vector(rbind(10 - movies$imdb_score, 10 - movies$imdb_score, 10 - movies$imdb_score)))
relations <- relations[, c(1,3,5)]
colnames(relations) = c("from","to","weights")
relations <- relations[!relations$from == "" | !relations$to == "",]
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
relations <- relations[!relations$from == " " | !relations$to == " ",]
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)),
weights=as.vector(rbind(10 - movies$imdb_score, 10 - movies$imdb_score, 10 - movies$imdb_score)))
relations <- relations[, c(1,3,5)]
colnames(relations) = c("from","to","weights")
relations <- relations[!relations$from == " " | !relations$to == " ",]
relations <- relations[!relations$from == "" | !relations$to == "",]
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
View(relations)
relations <- relations[!relations$from == "" & !relations$to == "",]
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
print(g, e=TRUE, v=TRUE)
eigen2 <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec2 <- data.frame(eigen2$vector)
View(ec2)
ec2 <- ec2[order(ec2$eigen2.vector),]
head(ec2)
ec2 <- data.frame(ec2[order(ec2$eigen2.vector),])
ec2 <- data.frame(order(ec2$eigen2.vector))
ec2 <- data.frame(eigen2$vector)
ec2 <- ec2[order(ec2),]
ec2 <- data.frame(ec2[order(ec2),])
summary(movies$director_name)
order(ec2)
ec2 <- data.frame(eigen2$vector)
View(ec2)
ec2 <- order(ec2)
ec2 <- data.frame(ec2)
View(ec2)
ec2 <- data.frame(eigen2$vector)
View(ec2)
ec2 <- order(ec2$eigen2.vector)
ec2 <- data.frame(eigen2$vector)
order(ec2$eigen2.vector)
View(ec2)
ec2 <- ec2[order(ec2$eigen2.vector),]
ec2 <- data.frame(ec2)
View(ec2)
ec2 <- data.frame(eigen2$vector)
setwd("~/Movie Score Predictor")
write.csv(ec2, file = "Actors.csv")
View(ec2)
ec2 <- data.frame(eigen2$vector)
View(ec2)
write.csv(ec2, file = "Actors.csv", delimiter = ";")
source('~/Movie Score Predictor/Scripts/Graph.R')
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
actors <- actors[! actors$Actor=="",]
colnames(actors) = c("Actor", "weights")
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)),
weights=as.vector(rbind(10 - movies$imdb_score, 10 - movies$imdb_score, 10 - movies$imdb_score)))
relations <- relations[, c(1,3,5)]
colnames(relations) = c("from","to","weights")
relations <- relations[!relations$from == "" & !relations$to == "",]
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
print(g, e=TRUE, v=TRUE)
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
actors <- actors[! actors$Actor=="",]
colnames(actors) = c("Actor", "weights")
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
actors <- actors[! actors$Actor=="",]
colnames(actors) = c("Actor", "weights")
actors1 <- data.frame(actor=c(as.character(movies$actor_1_name)), score=c(movies$imdb_score))
actors2 <- data.frame(actor=c(as.character(movies$actor_2_name)), score=c(movies$imdb_score))
actors3 <- data.frame(actor=c(as.character(movies$actor_3_name)), score=c(movies$imdb_score))
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
actors <- actors[! actors$Actor=="",]
colnames(actors) = c("Actor", "weights")
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
actors <- actors[! actors$Actor=="",]
actors <- rbind(actors1, actors2, actors3)
actors <- actors[! actors$Actor=="",]
actors <- rbind(actors1, actors2, actors3)
actors <- rbind(actors1, actors2, actors3)
actors <- aggregate(actors, by=list(actors$actor), FUN=mean)
actors <- actors[,c(1,3)]
colnames(actors) = c("Actor", "weights")
actors <- actors[!actors$Actor=="",]
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)))
relations <- relations[!relations$from == "" & !relations$to == "",]
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)))
relations <- relations[!relations$from == "" & !relations$to == "",]
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)))
View(relations)
relations <- relations[, c(1,3,5)]
colnames(relations) = c("from","to","weights")
relations <- relations[!relations$from == "" & !relations$to == "",]
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
View(actors)
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors)
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
relations <- relations[!relations$from == "" & !relations$to == "",]
View(relations)
colnames(relations) = c("from","to","weights")
View(relations)
relations <- data.frame(from=as.vector(rbind(actors1, actors2, actors3)),
to=as.vector(rbind(actors2, actors3, actors1)))
View(relations)
relations <- relations[, c(1,3)]
colnames(relations) = c("from","to")
View(relations)
relations <- relations[!relations$from == "" & !relations$to == "",]
g <- graph_from_data_frame(relations, directed=FALSE, vertices=actors$Actor)
eigen <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec <- data.frame(eigen1$vector)
eigen <- eigen_centrality(g, directed = FALSE, scale = TRUE, weights = NULL,
options = arpack_defaults)
ec <- data.frame(eigen$vector)
View(ec)
View(ec2)
write.csv(ec, file = "Actors.csv", sep = ";")
write.csv(ec, file = "Actors2.csv", sep = ";")
library(xlsx)
install.packages("xlsx")
write.xlsx(ec2, file, sheetName="actors")
library(xlsx)
write.xlsx(ec2, file, sheetName="actors")
write.xlsx(ec2, file = "actors.xlsx", sheetName="actors")
round(ec$eigen.vector, digits = 4)
View(ec)
ec <- round(ec$eigen.vector, digits = 4)
ec <- data.frame(eigen$vector)
ec3 <- round(ec$eigen.vector, digits = 4)
ec <- cbind(ec, ec3)
View(ec)
ec3 <- round(ec$eigen.vector, digits = 4)
ec3 <- order(ec3)
ec <- cbind(ec, ec3)
View(ec)
ec <- data.frame(eigen$vector)
ec3 <- round(ec$eigen.vector, digits = 4)
ec <- cbind(ec, ec3)
View(ec)
ec <- data.frame(eigen$vector)
ec3 <- round(ec$eigen.vector, digits = 5)
ec <- cbind(ec, ec3)
View(ec)
write.xlsx(ec, file = "actors.xlsx", sheetName="actors")
ec <- ec[,2]
ec <- data.frame(ec[,2])
ec <- data.frame(eigen$vector)
ec3 <- round(ec$eigen.vector, digits = 5)
ec <- cbind(ec, ec3)
write.xlsx(ec, file = "actors.xlsx", sheetName="actors")
pr <- page_rank(g, directed = FALSE, weights = NULL,
options = NULL)
pagerank <- page_rank(g, directed = FALSE, weights = NULL,
options = NULL)
pr <- data.frame(pr$vector)
View(pr)
pr <- data.frame(pr$vector)
pr2 <- round(ec$eigen.vector, digits = 5)
pr <- cbind(ec, pr2)
View(pr)
pr <- data.frame(pr$vector)
pr2 <- round(ec$eigen.vector, digits = 5)
pr <- cbind(pr, pr2)
pr <- data.frame(pr$vector)
pr2 <- round(pr$pagerank.vector, digits = 5)
pr <- cbind(pr, pr2)
pagerank <- page_rank(g, directed = FALSE, weights = NULL,
options = NULL)
pr <- data.frame(pr$vector)
pr2 <- round(pr$pagerank.vector, digits = 5)
pagerank <- page_rank(g, directed = FALSE, weights = NULL,
options = NULL)
pr <- data.frame(pr$vector)
pagerank <- page_rank(g, directed = FALSE, weights = NULL,
options = NULL)
pagerank <- page_rank(g, directed = FALSE, weights = NULL,
options = NULL)
pr <- data.frame(pagerank$vector)
pr2 <- round(pr$pagerank.vector, digits = 5)
pr <- cbind(pr, pr2)
View(pr)
pr <- data.frame(pagerank$vector)
pr2 <- round(pr$pagerank.vector, digits = 7)
pr <- cbind(pr, pr2)
View(pr)
write.xlsx(ec, file = "eigan.xlsx", sheetName="actors")
write.xlsx(ec, file = "pagerank.xlsx", sheetName="actors")
write.xlsx(pr, file = "pagerank.xlsx", sheetName="actors")
